import { NestFactory, Reflector } from '@nestjs/core';
import { AppModule } from './app.module';
import * as cookieParser from 'cookie-parser';
import { ValidationPipe, ClassSerializerInterceptor, Logger } from '@nestjs/common';
import { HttpExceptionFilter } from './security/filters/http-exception.filter';
import { ConfigService } from '@nestjs/config';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  const logger = new Logger('Bootstrap');

  // –ü–æ–ª—É—á–∞–µ–º ConfigService
  const configService = app.get(ConfigService);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º configService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
  const frontendHost = configService.get<string>('URL_FRONTEND', 'http://localhost');
  const frontendPort = configService.get<number>('PORT_FRONTEND', 10020);
  const backendPort = configService.get<number>('PORT_BACKEND', 10010);

  // –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º frontendUrl –±–µ–∑–æ–ø–∞—Å–Ω–æ
  const frontendUrl = `${frontendHost}:${frontendPort}`;

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º cookie-parser middleware (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –¥–æ enableCors)
  app.use(cookieParser());

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ cookie –∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
  app.enableCors({
    origin: [frontendUrl],
    credentials: true,
    exposedHeaders: ['set-cookie'],
  });

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π pipe –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ DTO
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  );

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const reflector = app.get(Reflector);
  app.useGlobalInterceptors(new ClassSerializerInterceptor(reflector));

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏–π HttpException
  app.useGlobalFilters(new HttpExceptionFilter());

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤
  app.setGlobalPrefix('api');

  await app.listen(backendPort);

  logger.log(`üöÄ Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${backendPort}`);
}

bootstrap().catch((err) => {
  const logger = new Logger('Bootstrap');
  logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', err);
  process.exit(1);
});
