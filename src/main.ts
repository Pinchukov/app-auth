import { NestFactory, Reflector } from '@nestjs/core';
import { AppModule } from './app.module';
import * as cookieParser from 'cookie-parser';
import { ValidationPipe, ClassSerializerInterceptor } from '@nestjs/common';
import { HttpExceptionFilter } from './security/filters/http-exception.filter';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π pipe –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ DTO
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  );

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (@Exclude –∏ @Expose –≤ DTO)
  const reflector = app.get(Reflector);
  app.useGlobalInterceptors(new ClassSerializerInterceptor(reflector));

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏—Å–∫–ª—é—á–µ–Ω–∏–π HttpException
  app.useGlobalFilters(new HttpExceptionFilter());

  app.setGlobalPrefix('api');
  app.use(cookieParser());

  const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:10000';

  app.enableCors({
    origin: [frontendUrl],
    credentials: true,
    exposedHeaders: ['set-cookie'],
  });

  const port = process.env.PORT ? Number(process.env.PORT) : 10005;
  await app.listen(port);

  console.log(`üöÄ Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
}

bootstrap();
